using UnityEngine;

public class MageBullet : MonoBehaviour
{
    [Header("Configuración")]
    public float speed = 8f;
    public int damage = 1;
    public float BulletStrength = 0.02f;

    [Header("Referencias")]
    public Transform target;

    private Rigidbody2D rb;
    private Animator animator;
    private Collider2D bulletCollider;
    private Vector2 currentDirection;

    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        animator = GetComponent<Animator>();
        bulletCollider = GetComponent<Collider2D>();

        if (target == null)
        {
            target = GameObject.FindGameObjectWithTag("Player")?.transform;
        }

        if (target != null)
        {
            currentDirection = (target.position - transform.position).normalized;
        }
        else
        {
            currentDirection = Vector2.zero;
        }

        rb.linearVelocity = currentDirection * speed;
    }

    void FixedUpdate()
    {
        if (target == null) return;

        Vector2 targetDirection = ((Vector2)target.position - rb.position).normalized;

        currentDirection = Vector2.Lerp(currentDirection, targetDirection, BulletStrength);

        rb.linearVelocity = currentDirection * speed;
    }

    void OnTriggerEnter2D(Collider2D collision)
    {

        if (collision.CompareTag("Player"))
        {
            collision.GetComponent<PlayerHealth>()?.TakeDamage(damage);
            TriggerImpactAnimation();
        }
        else if (collision.CompareTag("Obstacle") || collision.CompareTag("Enemy"))
        {
            TriggerImpactAnimation();
        }
        else if (collision.CompareTag("Boss"))
        {
            TriggerImpactAnimation();
        }
    }

    void TriggerImpactAnimation()
    {
        rb.linearVelocity = Vector2.zero;
        rb.bodyType = RigidbodyType2D.Static;


        if (bulletCollider != null)
            bulletCollider.enabled = false;

        if (animator != null)
            animator.SetTrigger("hit");
    }

    public void DestroyBullet()
    {
        Destroy(gameObject);
    }
}
using UnityEngine;

public class BossBullet : MonoBehaviour
{
    private Rigidbody2D Rigidbody2D;
    private Vector2 Direction;
    private Animator animator;

    public float Speed;
    public int Damage = 1;

    void Start()
    {
        Rigidbody2D = GetComponent<Rigidbody2D>();
        animator = GetComponent<Animator>();
    }

    void OnTriggerEnter2D(Collider2D collision)
    {
        HandleCollision(collision);
    }

    private void HandleCollision(Collider2D collision)
    {
        if (collision.CompareTag("Player"))
        {
            collision.GetComponent<PlayerHealth>()?.TakeDamage(Damage);
        }
        if (collision.CompareTag("Enemy"))
        {
            collision.GetComponent<EnemyHealth>()?.TakeDamage(Damage);
        }

        if (collision.CompareTag("Obstacle") || collision.CompareTag("Enemy") || collision.CompareTag("Player"))
        {
            animator.SetBool("hit", true);
            Rigidbody2D.bodyType = RigidbodyType2D.Static;
        }
    }

    public void DestroyBullet()
    {
        Rigidbody2D.bodyType = RigidbodyType2D.Dynamic;
        Destroy(gameObject);
    }
}

using System.Collections;
using UnityEngine;

public class LaserAttack : MonoBehaviour
{
    [Header("Configuración")]
    public float minDestroyTime = 2f; // Tiempo mínimo antes de destruirse
    public float maxDestroyTime = 3.5f; // Tiempo máximo antes de destruirse

    [Header("Referencias")]
    public GameObject LaserBody;
    public GameObject Laser;
    private bool isActive = false;

    void Start()
    {
        LaserBody.SetActive(false);
        Laser.SetActive(false);
        ActivateLaser();
    }

    public void ActivateLaser()
    {
        if (isActive) return;
        isActive = true;
        LaserBody.SetActive(true);
        Laser.SetActive(false);
        StartCoroutine(LaserSequence());
    }

    IEnumerator LaserSequence()
    {
        Debug.Log("Láser activado, creciendo en altura...");
        yield return new WaitForSeconds(1.5f);
        Laser.SetActive(true);


        float destroyTime = Random.Range(minDestroyTime, maxDestroyTime);
        Debug.Log($"El láser se destruirá en {destroyTime} segundos.");
        yield return new WaitForSeconds(destroyTime);

        Destroy(gameObject);
    }

    void Update()
    {
        // Activación manual con la tecla X (para pruebas)
        if (Input.GetKeyDown(KeyCode.X))
        {
            Debug.Log("Tecla X presionada: activando láser.");
            ActivateLaser();
        }
    }
}
using UnityEngine;

public class BombScript : MonoBehaviour
{
    private Animator animator;
    private bool isCountingDown = false;
    public int damage = 1;
    private bool isExploding = false;
    public Spikes spikes;
    void Start()
    {
        animator = GetComponent<Animator>();
        Debug.Log("Bomba iniciada correctamente.");
        spikes = GetComponent<Spikes>();
        spikes.enabled = false;
    }

    private void OnTriggerEnter2D(Collider2D collision)
    {
        if (!isCountingDown)
        {
            if (collision.CompareTag("Player"))
            {
                CountingDown();
            }
        }
    }

    public void CountingDown()
    {
        isCountingDown = true;
        Debug.Log("Cuenta regresiva iniciada.");
        animator.SetBool("CountingDown", true);
    }
    public void Exploding()
    {
        Debug.Log("¡La bomba está explotando!");
        animator.SetBool("Explode", true);
        isExploding = true;
        spikes.enabled = true;
    }

    public void Destroy()
    {
        Destroy(gameObject);
    }
}using UnityEngine;
using UnityEngine.SceneManagement;

public class GameOver : MonoBehaviour
{
    public GameObject GameOverPanel;
    private bool gameOver;

    private void Update()
    {
        if (gameOver == true)
        {
            if (Input.GetKeyUp(KeyCode.Space))
            {
                RestartLevel();
            }
        }
    }
    public void ActiveGameOver()
    {
        gameOver = true;
        if (GameOverPanel != null)
        {
            GameOverPanel.SetActive(true);
        }
        else
        {
            // Si la referencia está rota, buscar por etiqueta
            GameObject panel = GameObject.FindGameObjectWithTag("GameOverPanel");
            if (panel != null)
            {
                GameOverPanel = panel; // Actualizar referencia
                panel.SetActive(true);
            }
            else
            {
                // Si no hay panel, reiniciar el nivel
                RestartLevel();
            }
        }
    }

    public void RestartLevel()
    {
            gameOver = false;
            SceneManager.LoadScene(SceneManager.GetActiveScene().name);
    }
}using UnityEngine;
using System.Collections;
using TMPro;
using UnityEngine.SceneManagement;

public class FinalMenu : MonoBehaviour
{
    [SerializeField] private TMP_Text badFinalText;
    [SerializeField] private Dialogue dialogue;
    [SerializeField] private BossHealth bossHealth;
    [SerializeField] private GameObject badFinalPanel;
    [SerializeField] private GameObject goodFinalPanel;
    [SerializeField] private GameObject hearthPanel;

    private bool goodFinal;
    private bool badFinal;
    private bool goodFinalTriggered;
    private bool badFinalTriggered;

    private void Start()
    {
        goodFinal = false;
        badFinal = false;
        goodFinalTriggered = false;
        badFinalTriggered = false;
        goodFinalPanel.SetActive(false);
        badFinalPanel.SetActive(false);
    }

    private void Update()
    {
        if (Input.GetKeyDown(KeyCode.X))
        {
            bossHealth.currentHealth = 0;
            dialogue.BossDialogue = true;
            OnTriggerEnter2DFake();
        }

        if (Input.GetKeyDown(KeyCode.C))
        {
            bossHealth.currentHealth = 0;
            dialogue.BossDialogue = false;
        }

        if ((goodFinal || badFinal) && Input.GetKeyDown(KeyCode.Space))
        {
            SceneManager.LoadScene("Main Menu");
            PlayerPrefs.SetInt("BossDialogue", 0);
            PlayerPrefs.Save();
        }

        if (dialogue.BossDialogue == false && bossHealth.currentHealth <= 0 && !goodFinalTriggered)
        {
            goodFinalTriggered = true;
            StartCoroutine(GoodFinalCoroutine());
        }
    }

    private IEnumerator BadFinalCoroutine()
    {
        Debug.Log("BadFinal Coroutine started.");
        yield return new WaitForSeconds(2.5f);

        FadeController.Instance.FadeOut(() =>
        {
            badFinal = true;
            hearthPanel.SetActive(false);
            badFinalPanel.SetActive(true);
            goodFinalPanel.SetActive(false);
            FadeController.Instance.FadeIn();
            Debug.Log("Bad final shown.");
        });
    }

    private IEnumerator GoodFinalCoroutine()
    {
        Debug.Log("GoodFinal Coroutine started.");
        yield return new WaitForSeconds(3f);

        FadeController.Instance.FadeOut(() =>
        {
            goodFinal = true;
            hearthPanel.SetActive(false);
            badFinalPanel.SetActive(false);
            goodFinalPanel.SetActive(true);
            FadeController.Instance.FadeIn();
            Debug.Log("Good final shown.");
        });
    }

    private void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.CompareTag("Player"))
        {
            if (bossHealth.currentHealth <= 0 && dialogue.BossDialogue == true)
            {
                badFinalTriggered = true;
                StartCoroutine(BadFinalCoroutine());
            }
        }
    }

    private void OnTriggerEnter2DFake()
    {
        if (bossHealth.currentHealth <= 0 && dialogue.BossDialogue == true)
        {
            badFinalTriggered = true;
            StartCoroutine(BadFinalCoroutine());
        }
    }
}using UnityEngine;
using UnityEngine.UI;
using System.Collections.Generic;
public class VolumeManager : MonoBehaviour
{
    public Slider slider;
    public float sliderValue;
    void Start()
    {
        slider.value = PlayerPrefs.GetFloat("Volume", 0.5f);
        AudioListener.volume = slider.value;
    }
    public void SetVolume(float value)
    {
        sliderValue = value;
        AudioListener.volume = sliderValue;
        PlayerPrefs.SetFloat("Volume", sliderValue);
        PlayerPrefs.Save();
        Debug.Log("Volume set to: " + sliderValue);
    }
}
using UnityEngine;
using UnityEngine.UI;
using System.Collections.Generic;
public class VolumeManager : MonoBehaviour
{
    public Slider slider;
    public float sliderValue;
    void Start()
    {
        slider.value = PlayerPrefs.GetFloat("Volume", 0.5f);
        AudioListener.volume = slider.value;
    }
    public void SetVolume(float value)
    {
        sliderValue = value;
        AudioListener.volume = sliderValue;
        PlayerPrefs.SetFloat("Volume", sliderValue);
        PlayerPrefs.Save();
        Debug.Log("Volume set to: " + sliderValue);
    }
}
using TMPro;
using UnityEngine;
using System.Collections.Generic;

public class DropdownResolution : MonoBehaviour
{
    public TMP_Dropdown dropDown;
    Resolution[] resolutions;

    void Start()
    {
        ReviewResolutions();
    }

    void Update()
    {
        if (Input.GetKeyDown(KeyCode.F11))
        {
            ToggleFullScreen();
        }
    }

    void ReviewResolutions()
    {
        resolutions = Screen.resolutions;
        dropDown.ClearOptions();
        List<string> options = new List<string>();
        int currentResolutionIndex = 0;

        for (int i = 0; i < resolutions.Length; i++)
        {
            string option = resolutions[i].width + "x" + resolutions[i].height;
            options.Add(option);

            if (resolutions[i].width == Screen.currentResolution.width &&
                resolutions[i].height == Screen.currentResolution.height)
            {
                currentResolutionIndex = i;
            }
        }

        dropDown.AddOptions(options);
        dropDown.value = currentResolutionIndex;
        dropDown.RefreshShownValue();
    }

    public void ChangeResolution(int resolutionIndex)
    {
        Resolution resolution = resolutions[resolutionIndex];
        Screen.SetResolution(resolution.width, resolution.height, Screen.fullScreen);
    }

    void ToggleFullScreen()
    {
        Screen.fullScreen = !Screen.fullScreen;
    }
}
using UnityEngine;
using UnityEngine.Localization.Settings;
using System.Collections;

public class LanguageManager : MonoBehaviour
{
    private bool active = false;
    void Start()
    {
        int ID = PlayerPrefs.GetInt("LocalKey", 0);
        ChangeLocale(ID);
    }
    public void ChangeLocale(int localeID)
    {
        if (active)
        {
            return;
        }
        StartCoroutine(SetLocale(localeID));
    }

    private IEnumerator SetLocale(int localeID)
    {
        active = true;
        yield return LocalizationSettings.InitializationOperation;
        LocalizationSettings.SelectedLocale = LocalizationSettings.AvailableLocales.Locales[localeID];
        PlayerPrefs.SetInt("LocalKey", localeID);
        active = false;
    }
}
using UnityEngine;
public class GameData
{
    public Vector3 PlayerPosition;
    public int currentHealth;
    public bool hasGun;
    public bool BossDialogue;
    public string currentScene;
}
using UnityEngine;
using System.IO;
public class GameDataManager : MonoBehaviour
{
    public GameObject Player;
    public string SaveFile;
    public GameData gameData;
    public GameObject NPC;

    private void Awake()
    {
        SaveFile = Application.dataPath + "/GameData.json";
        Player = GameObject.FindGameObjectWithTag("Player");
    }
    private void Update()
    { 
    }

    public void LoadData()
    {
        if (File.Exists(SaveFile))
        {
            Debug.Log("Loading data");
            string content = File.ReadAllText(SaveFile);
            gameData = JsonUtility.FromJson<GameData>(content);

            // Cargar la escena solo si es diferente
            string savedScene = gameData.currentScene;
            string currentScene = UnityEngine.SceneManagement.SceneManager.GetActiveScene().name;

            // Si la escena es diferente, cargarla
            if (savedScene != currentScene)
            {
                Debug.Log("Changing scene to: " + savedScene);
                UnityEngine.SceneManagement.SceneManager.LoadScene(savedScene);
            }
            else
            {
                // Si estamos en la misma escena, solo teletransportamos al jugador
                Player.transform.position = gameData.PlayerPosition;
            }

            // Cargar otros datos
            PlayerHealth ph = Player.GetComponent<PlayerHealth>();
            ph.currentHealth = gameData.currentHealth;
            PlayerController pc = Player.GetComponent<PlayerController>();
            pc.playerHasGun = gameData.hasGun;
        }
        else
        {
            Debug.Log("File not found");
        }
    }

    public void SaveData()
    {
        PlayerHealth ph = Player.GetComponent<PlayerHealth>();
        PlayerController pc = Player.GetComponent<PlayerController>();
        Dialogue dialogue = NPC.GetComponent<Dialogue>();

        GameData newData = new GameData()
        {
            PlayerPosition = Player.transform.position,
            currentHealth = ph.currentHealth,
            hasGun = pc.playerHasGun,
            BossDialogue = dialogue.BossDialogue,
            currentScene = UnityEngine.SceneManagement.SceneManager.GetActiveScene().name // Guarda el nombre de la escena
        };

        string json = JsonUtility.ToJson(newData);
        File.WriteAllText(SaveFile, json);
        Debug.Log("Datos guardados");
    }


}